/*
========================================================================================
    AutoClustal Nextflow Configuration
========================================================================================
*/

// Global default params, used in configs
params {
    
    // Input options
    input                      = null
    outdir                     = 'results'
    
    // Sequence analysis options
    seq_type                   = 'auto'        // auto, dna, rna, protein
    aligner                    = 'muscle'      // muscle, clustalw, mafft
    phylogeny                  = 'nj'          // nj, upgma, ml
    cluster_threshold          = 0.8
    
    // Database search options
    blast                      = false
    blat                       = false
    blast_db                   = 'nr'
    max_blast_hits             = 5
    evalue_threshold           = 1e-5
    
    // Analysis options
    pca                        = false
    threads                    = 4
    
    // Boilerplate options
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    
    // Max resource options
    max_memory                 = '16.GB'
    max_cpus                   = 8
    max_time                   = '8.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled              = true
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
    }
    mamba {
        conda.enabled              = true
        conda.useMamba             = true
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
    }
    docker {
        docker.enabled             = true
        docker.userEmulation       = true
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled        = true
        singularity.autoMounts     = true
        docker.enabled             = false
        podman.enabled             = false
        shifter.enabled            = false
        charliecloud.enabled       = false
    }
    podman {
        podman.enabled             = true
        docker.enabled             = false
        singularity.enabled        = false
        shifter.enabled            = false
        charliecloud.enabled       = false
    }
    shifter {
        shifter.enabled            = true
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        charliecloud.enabled       = false
    }
    charliecloud {
        charliecloud.enabled       = true
        docker.enabled             = false
        singularity.enabled        = false
        podman.enabled             = false
        shifter.enabled            = false
    }
    gitpod {
        executor.name              = 'local'
        executor.cpus              = 16
        executor.memory            = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'AutoClustal'
    author          = 'AutoClustal Pipeline'
    homePage        = 'https://github.com/srhartono/autoclustal'
    description     = 'Comprehensive sequence analysis pipeline for FASTA/FASTQ sequences'
    mainScript      = 'autoclustal.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}